{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CivicReport - Crowdsourced Civic Issue Reporting System\n\n## Overview\n\nCivicReport is a comprehensive web-based crowdsourced civic issue reporting system that enables citizens to report civic problems, administrators to manage and resolve issues, and provides role-based access control for different user types. The system supports three user roles: Citizens (who report issues), Admins (who manage assigned issues), and Super Admins (who have full system oversight). Citizens can submit detailed issue reports with media attachments, upvote existing issues, and track their submissions through a complete workflow from \"Not Assigned\" to \"Assigned\" to \"Resolved\".\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based single-page application (SPA) architecture built with TypeScript and Vite for development tooling. The UI framework is built around Shadcn/UI components with Tailwind CSS for styling, providing a consistent and responsive design system. Client-side routing is handled by Wouter, a lightweight routing library. The frontend implements role-based rendering to show different interfaces based on user permissions.\n\n### Backend Architecture\nThe server follows a traditional Express.js REST API architecture with TypeScript. Authentication is implemented using Passport.js with local strategy and session-based authentication stored in PostgreSQL. The API endpoints are organized by functionality (auth, issues, users, admins) with proper middleware for authentication and authorization checks. File uploads are handled using Multer middleware for processing images and videos.\n\n### Data Storage\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The database schema includes users, issues, categories, upvotes, and assignments tables with proper foreign key relationships. The Neon Database serverless PostgreSQL service is used for cloud hosting. Session data is persisted in the database using connect-pg-simple for Express sessions.\n\n### State Management\nClient-side state is managed using TanStack Query (React Query) for server state management, caching, and synchronization. Form state is handled by React Hook Form with Zod schema validation for type-safe form handling. Authentication state is managed through a custom React context provider that wraps the TanStack Query auth endpoints.\n\n### File Handling\nMedia file uploads (images and videos) are processed on the server with validation for file types and size limits. Files are stored with generated URLs that are saved to the database and referenced in issue records.\n\n### Security Architecture\nThe system implements role-based access control (RBAC) with three distinct roles. Password hashing uses the built-in Node.js crypto module with scrypt for secure password storage. Protected routes are implemented on both frontend and backend with middleware that checks authentication status and user roles before allowing access to sensitive operations.\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting service for cloud-based data storage\n- **Drizzle ORM**: Type-safe database ORM for PostgreSQL with migration support\n\n### Authentication & Security\n- **Passport.js**: Authentication middleware with local strategy for email/password login\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **bcryptjs**: Password hashing library for secure credential storage\n\n### Frontend Libraries\n- **React**: Core frontend framework for building the user interface\n- **TanStack Query**: Server state management and data fetching library\n- **Wouter**: Lightweight client-side routing library\n- **React Hook Form**: Form state management with validation\n- **Zod**: TypeScript-first schema validation library\n\n### UI Framework\n- **Shadcn/UI**: Pre-built component library based on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Radix UI**: Headless UI component primitives for accessibility\n\n### Development Tools\n- **Vite**: Modern build tool and development server\n- **TypeScript**: Static type checking for JavaScript\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### File Processing\n- **Multer**: Express middleware for handling multipart/form-data file uploads\n- **File Type Validation**: Server-side validation for image and video file types with size limits\n\n### Geographic Data\n- **State/City API**: Custom endpoints for hierarchical location selection (states and cities within states)","size_bytes":4656},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"email\" },\n      async (email, password, done) => {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByEmail(req.body.email);\n    if (existingUser) {\n      return res.status(400).send(\"Email already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2741},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { \n  insertIssueSchema, \n  insertCategorySchema, \n  insertAssignmentSchema, \n  resolveIssueSchema \n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|mp4|mov|avi/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only images and videos are allowed'));\n    }\n  }\n});\n\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    next();\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  setupAuth(app);\n\n  // States and cities data - using static data for demo\n  app.get(\"/api/states\", (req, res) => {\n    res.json([\n      { value: \"california\", label: \"California\" },\n      { value: \"new-york\", label: \"New York\" },\n      { value: \"texas\", label: \"Texas\" },\n      { value: \"florida\", label: \"Florida\" },\n    ]);\n  });\n\n  app.get(\"/api/cities/:state\", (req, res) => {\n    const cities = {\n      california: [\n        { value: \"san-francisco\", label: \"San Francisco\" },\n        { value: \"los-angeles\", label: \"Los Angeles\" },\n        { value: \"san-diego\", label: \"San Diego\" },\n      ],\n      \"new-york\": [\n        { value: \"new-york-city\", label: \"New York City\" },\n        { value: \"buffalo\", label: \"Buffalo\" },\n        { value: \"rochester\", label: \"Rochester\" },\n      ],\n      texas: [\n        { value: \"houston\", label: \"Houston\" },\n        { value: \"dallas\", label: \"Dallas\" },\n        { value: \"austin\", label: \"Austin\" },\n      ],\n      florida: [\n        { value: \"miami\", label: \"Miami\" },\n        { value: \"orlando\", label: \"Orlando\" },\n        { value: \"tampa\", label: \"Tampa\" },\n      ],\n    };\n    \n    res.json(cities[req.params.state as keyof typeof cities] || []);\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", requireAuth, requireRole([\"superadmin\"]), async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid category data\" });\n    }\n  });\n\n  // Issues\n  app.get(\"/api/issues\", async (req, res) => {\n    try {\n      const { state, city, status, userId } = req.query;\n      const filters: any = {};\n      \n      if (state) filters.state = state as string;\n      if (city) filters.city = city as string;\n      if (status) filters.status = status as string;\n      if (userId) filters.userId = userId as string;\n\n      const issues = await storage.getIssues(filters);\n      res.json(issues);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch issues\" });\n    }\n  });\n\n  app.get(\"/api/issues/:id\", async (req, res) => {\n    try {\n      const userId = req.user?.id;\n      const issue = await storage.getIssue(req.params.id, userId);\n      if (!issue) {\n        return res.status(404).json({ message: \"Issue not found\" });\n      }\n      res.json(issue);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch issue\" });\n    }\n  });\n\n  app.post(\"/api/issues\", requireAuth, upload.array('media', 5), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      const mediaUrls = files?.map(file => `/uploads/${file.filename}`) || [];\n      \n      const issueData = insertIssueSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n        mediaUrls,\n      });\n      \n      const issue = await storage.createIssue(issueData);\n      res.status(201).json(issue);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid issue data\" });\n    }\n  });\n\n  app.post(\"/api/issues/:id/upvote\", requireAuth, async (req, res) => {\n    try {\n      const result = await storage.toggleUpvote(req.user!.id, req.params.id);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle upvote\" });\n    }\n  });\n\n  app.post(\"/api/issues/:id/resolve\", requireAuth, requireRole([\"admin\"]), upload.single('resolutionImage'), async (req, res) => {\n    try {\n      const resolutionImageUrl = req.file ? `/uploads/${req.file.filename}` : '';\n      const resolveData = resolveIssueSchema.parse({\n        resolutionNotes: req.body.resolutionNotes,\n        resolutionImageUrl,\n      });\n      \n      await storage.resolveIssue(req.params.id, resolveData, req.user!.id);\n      res.json({ message: \"Issue resolved successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to resolve issue\" });\n    }\n  });\n\n  // Assignments\n  app.post(\"/api/issues/:id/assign\", requireAuth, requireRole([\"superadmin\"]), async (req, res) => {\n    try {\n      const { adminIds, assignmentNotes } = req.body;\n      \n      if (!adminIds || !Array.isArray(adminIds) || adminIds.length === 0) {\n        return res.status(400).json({ message: \"At least one admin must be selected\" });\n      }\n\n      const assignments = [];\n      for (const adminId of adminIds) {\n        const assignmentData = insertAssignmentSchema.parse({\n          issueId: req.params.id,\n          adminId,\n          assignedBy: req.user!.id,\n          assignmentNotes,\n        });\n        \n        const assignment = await storage.assignIssue(assignmentData);\n        assignments.push(assignment);\n      }\n      \n      res.json(assignments);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to assign issue\" });\n    }\n  });\n\n  app.get(\"/api/admin/issues\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const issues = await storage.getAssignedIssues(req.user!.id);\n      res.json(issues);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch assigned issues\" });\n    }\n  });\n\n  // Admin management\n  app.get(\"/api/admins\", requireAuth, requireRole([\"superadmin\"]), async (req, res) => {\n    try {\n      const admins = await storage.getAdminUsers();\n      res.json(admins);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admins\" });\n    }\n  });\n\n  // Analytics\n  app.get(\"/api/analytics\", requireAuth, requireRole([\"admin\", \"superadmin\"]), async (req, res) => {\n    try {\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/uploads', (req, res, next) => {\n    // Simple static file serving for uploads\n    // In production, you'd want to use a proper file server or CDN\n    res.sendFile(path.join(process.cwd(), req.path));\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7719},"server/storage.ts":{"content":"import { \n  users, \n  issues, \n  categories, \n  upvotes, \n  assignments,\n  type User, \n  type InsertUser,\n  type Issue,\n  type InsertIssue,\n  type Category,\n  type InsertCategory,\n  type Upvote,\n  type InsertUpvote,\n  type Assignment,\n  type InsertAssignment,\n  type ResolveIssue\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, inArray } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  sessionStore: any;\n  \n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAdminUsers(): Promise<User[]>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Issue operations\n  getIssues(filters?: {\n    state?: string;\n    city?: string;\n    status?: string;\n    userId?: string;\n    assignedToAdmin?: string;\n  }): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n    userUpvoted?: boolean;\n    resolver?: User | null;\n  })[]>;\n  getIssue(id: string, userId?: string): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n    userUpvoted?: boolean;\n    resolver?: User | null;\n  }) | undefined>;\n  createIssue(issue: InsertIssue): Promise<Issue>;\n  updateIssueStatus(id: string, status: string): Promise<void>;\n  resolveIssue(id: string, data: ResolveIssue, resolvedBy: string): Promise<void>;\n  \n  // Upvote operations\n  toggleUpvote(userId: string, issueId: string): Promise<{ upvoted: boolean; count: number }>;\n  \n  // Assignment operations\n  assignIssue(assignment: InsertAssignment): Promise<Assignment>;\n  getAssignedIssues(adminId: string): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n  })[]>;\n  \n  // Analytics\n  getAnalytics(): Promise<{\n    totalIssues: number;\n    notAssigned: number;\n    assigned: number;\n    resolved: number;\n    categoryBreakdown: { name: string; count: number }[];\n    mostUpvotedIssues: (Issue & { \n      category: Category | null; \n      upvoteCount: number;\n    })[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getAdminUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, \"admin\"));\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async getIssues(filters?: {\n    state?: string;\n    city?: string;\n    status?: string;\n    userId?: string;\n    assignedToAdmin?: string;\n  }): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n    userUpvoted?: boolean;\n    resolver?: User | null;\n  })[]> {\n    let query = db\n      .select({\n        issue: issues,\n        category: categories,\n        user: users,\n        upvoteCount: sql<number>`COALESCE(${sql`COUNT(${upvotes.id})`}, 0)`,\n        resolver: sql<User | null>`NULL`,\n      })\n      .from(issues)\n      .leftJoin(categories, eq(issues.categoryId, categories.id))\n      .leftJoin(users, eq(issues.userId, users.id))\n      .leftJoin(upvotes, eq(issues.id, upvotes.issueId))\n      .groupBy(issues.id, categories.id, users.id);\n\n    if (filters?.assignedToAdmin) {\n      query = query\n        .innerJoin(assignments, eq(issues.id, assignments.issueId));\n    }\n\n    const conditions = [];\n    if (filters?.assignedToAdmin) conditions.push(eq(assignments.adminId, filters.assignedToAdmin));\n    if (filters?.state) conditions.push(eq(issues.state, filters.state));\n    if (filters?.city) conditions.push(eq(issues.city, filters.city));\n    if (filters?.status) conditions.push(eq(issues.status, filters.status));\n    if (filters?.userId) conditions.push(eq(issues.userId, filters.userId));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(issues.createdAt));\n\n    const results = await query;\n    \n    return results.map(result => ({\n      ...result.issue,\n      category: result.category,\n      user: result.user,\n      upvoteCount: result.upvoteCount,\n      resolver: result.resolver,\n    }));\n  }\n\n  async getIssue(id: string, userId?: string): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n    userUpvoted?: boolean;\n    resolver?: User | null;\n  }) | undefined> {\n    const result = await db\n      .select({\n        issue: issues,\n        category: categories,\n        user: users,\n        resolver: sql<User | null>`resolver_user`,\n        upvoteCount: sql<number>`COALESCE(upvote_count.count, 0)`,\n        userUpvoted: userId ? sql<boolean>`CASE WHEN user_upvote.id IS NOT NULL THEN true ELSE false END` : sql<boolean>`false`,\n      })\n      .from(issues)\n      .leftJoin(categories, eq(issues.categoryId, categories.id))\n      .leftJoin(users, eq(issues.userId, users.id))\n      .leftJoin(\n        sql`(SELECT issue_id, COUNT(*) as count FROM upvotes GROUP BY issue_id) upvote_count`,\n        sql`upvote_count.issue_id = ${issues.id}`\n      )\n      .leftJoin(\n        sql`users resolver_user`,\n        eq(issues.resolvedBy, sql`resolver_user.id`)\n      )\n      .leftJoin(\n        userId ? sql`upvotes user_upvote` : sql`(SELECT NULL as id, NULL as user_id, NULL as issue_id) user_upvote`,\n        userId ? and(eq(sql`user_upvote.issue_id`, issues.id), eq(sql`user_upvote.user_id`, userId)) : sql`false`\n      )\n      .where(eq(issues.id, id))\n      .limit(1);\n\n    const [row] = result;\n    if (!row) return undefined;\n\n    return {\n      ...row.issue,\n      category: row.category,\n      user: row.user,\n      upvoteCount: row.upvoteCount,\n      userUpvoted: row.userUpvoted,\n      resolver: row.resolver,\n    };\n  }\n\n  async createIssue(issue: InsertIssue): Promise<Issue> {\n    const [newIssue] = await db\n      .insert(issues)\n      .values(issue)\n      .returning();\n    return newIssue;\n  }\n\n  async updateIssueStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(issues)\n      .set({ status })\n      .where(eq(issues.id, id));\n  }\n\n  async resolveIssue(id: string, data: ResolveIssue, resolvedBy: string): Promise<void> {\n    await db\n      .update(issues)\n      .set({\n        status: \"resolved\",\n        resolutionNotes: data.resolutionNotes,\n        resolutionImageUrl: data.resolutionImageUrl,\n        resolvedBy,\n        resolvedAt: new Date(),\n      })\n      .where(eq(issues.id, id));\n  }\n\n  async toggleUpvote(userId: string, issueId: string): Promise<{ upvoted: boolean; count: number }> {\n    const existingUpvote = await db\n      .select()\n      .from(upvotes)\n      .where(and(eq(upvotes.userId, userId), eq(upvotes.issueId, issueId)))\n      .limit(1);\n\n    if (existingUpvote.length > 0) {\n      // Remove upvote\n      await db\n        .delete(upvotes)\n        .where(and(eq(upvotes.userId, userId), eq(upvotes.issueId, issueId)));\n    } else {\n      // Add upvote\n      await db\n        .insert(upvotes)\n        .values({ userId, issueId });\n    }\n\n    const [countResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(upvotes)\n      .where(eq(upvotes.issueId, issueId));\n\n    return {\n      upvoted: existingUpvote.length === 0,\n      count: countResult.count,\n    };\n  }\n\n  async assignIssue(assignment: InsertAssignment): Promise<Assignment> {\n    const [newAssignment] = await db\n      .insert(assignments)\n      .values(assignment)\n      .returning();\n    \n    await this.updateIssueStatus(assignment.issueId!, \"assigned\");\n    \n    return newAssignment;\n  }\n\n  async getAssignedIssues(adminId: string): Promise<(Issue & { \n    category: Category | null; \n    user: User | null; \n    upvoteCount: number;\n  })[]> {\n    return this.getIssues({ assignedToAdmin: adminId, status: \"assigned\" });\n  }\n\n  async getAnalytics(): Promise<{\n    totalIssues: number;\n    notAssigned: number;\n    assigned: number;\n    resolved: number;\n    categoryBreakdown: { name: string; count: number }[];\n    mostUpvotedIssues: (Issue & { \n      category: Category | null; \n      upvoteCount: number;\n    })[];\n  }> {\n    const [totalResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(issues);\n\n    const [notAssignedResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(issues)\n      .where(eq(issues.status, \"not-assigned\"));\n\n    const [assignedResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(issues)\n      .where(eq(issues.status, \"assigned\"));\n\n    const [resolvedResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(issues)\n      .where(eq(issues.status, \"resolved\"));\n\n    const categoryBreakdown = await db\n      .select({\n        name: categories.name,\n        count: sql<number>`COUNT(${issues.id})`,\n      })\n      .from(categories)\n      .leftJoin(issues, eq(categories.id, issues.categoryId))\n      .groupBy(categories.id, categories.name);\n\n    const mostUpvotedIssues = await db\n      .select({\n        issue: issues,\n        category: categories,\n        upvoteCount: sql<number>`COALESCE(COUNT(${upvotes.id}), 0)`,\n      })\n      .from(issues)\n      .leftJoin(categories, eq(issues.categoryId, categories.id))\n      .leftJoin(upvotes, eq(issues.id, upvotes.issueId))\n      .groupBy(issues.id, categories.id)\n      .orderBy(desc(sql`COUNT(${upvotes.id})`))\n      .limit(3);\n\n    return {\n      totalIssues: totalResult.count,\n      notAssigned: notAssignedResult.count,\n      assigned: assignedResult.count,\n      resolved: resolvedResult.count,\n      categoryBreakdown,\n      mostUpvotedIssues: mostUpvotedIssues.map(item => ({\n        ...item.issue,\n        category: item.category,\n        upvoteCount: item.upvoteCount,\n      })),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10901},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"citizen\"), // citizen, admin, superadmin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n});\n\nexport const issues = pgTable(\"issues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  state: text(\"state\").notNull(),\n  city: text(\"city\").notNull(),\n  reporterName: text(\"reporter_name\").notNull(),\n  reporterPhone: text(\"reporter_phone\").notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  location: text(\"location\").notNull(),\n  priority: text(\"priority\").notNull(), // low, medium, high\n  status: text(\"status\").notNull().default(\"not-assigned\"), // not-assigned, assigned, resolved\n  mediaUrls: jsonb(\"media_urls\").$type<string[]>().default([]),\n  userId: varchar(\"user_id\").references(() => users.id),\n  resolutionNotes: text(\"resolution_notes\"),\n  resolutionImageUrl: text(\"resolution_image_url\"),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const upvotes = pgTable(\"upvotes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  issueId: varchar(\"issue_id\").references(() => issues.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  issueId: varchar(\"issue_id\").references(() => issues.id),\n  adminId: varchar(\"admin_id\").references(() => users.id),\n  assignedBy: varchar(\"assigned_by\").references(() => users.id),\n  assignmentNotes: text(\"assignment_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  issues: many(issues),\n  upvotes: many(upvotes),\n  assignments: many(assignments),\n  resolvedIssues: many(issues, { relationName: \"resolver\" }),\n}));\n\nexport const issuesRelations = relations(issues, ({ one, many }) => ({\n  user: one(users, { fields: [issues.userId], references: [users.id] }),\n  category: one(categories, { fields: [issues.categoryId], references: [categories.id] }),\n  resolver: one(users, { fields: [issues.resolvedBy], references: [users.id], relationName: \"resolver\" }),\n  upvotes: many(upvotes),\n  assignments: many(assignments),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  issues: many(issues),\n}));\n\nexport const upvotesRelations = relations(upvotes, ({ one }) => ({\n  user: one(users, { fields: [upvotes.userId], references: [users.id] }),\n  issue: one(issues, { fields: [upvotes.issueId], references: [issues.id] }),\n}));\n\nexport const assignmentsRelations = relations(assignments, ({ one }) => ({\n  issue: one(issues, { fields: [assignments.issueId], references: [issues.id] }),\n  admin: one(users, { fields: [assignments.adminId], references: [users.id] }),\n  assignedByUser: one(users, { fields: [assignments.assignedBy], references: [users.id], relationName: \"assigner\" }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const insertIssueSchema = createInsertSchema(issues).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  resolvedAt: true,\n  resolvedBy: true,\n  resolutionNotes: true,\n  resolutionImageUrl: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertUpvoteSchema = createInsertSchema(upvotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const resolveIssueSchema = z.object({\n  resolutionNotes: z.string().min(1),\n  resolutionImageUrl: z.string().min(1),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type Issue = typeof issues.$inferSelect;\nexport type InsertIssue = z.infer<typeof insertIssueSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Upvote = typeof upvotes.$inferSelect;\nexport type InsertUpvote = z.infer<typeof insertUpvoteSchema>;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type ResolveIssue = z.infer<typeof resolveIssueSchema>;\n","size_bytes":5351},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport AddIssuePage from \"@/pages/add-issue-page\";\nimport MyReportsPage from \"@/pages/my-reports-page\";\nimport IssueDetailPage from \"@/pages/issue-detail-page\";\nimport AnalyticsPage from \"@/pages/analytics-page\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={DashboardPage} />\n      <ProtectedRoute path=\"/add-issue\" component={AddIssuePage} />\n      <ProtectedRoute path=\"/my-reports\" component={MyReportsPage} />\n      <ProtectedRoute path=\"/issue/:id\" component={IssueDetailPage} />\n      <ProtectedRoute path=\"/analytics\" component={AnalyticsPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1475},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/assign-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertCircle } from \"lucide-react\";\nimport { insertAssignmentSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ninterface AssignModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  issueId: string;\n}\n\nconst assignFormSchema = z.object({\n  adminIds: z.array(z.string()).min(1, \"At least one admin must be selected\"),\n  assignmentNotes: z.string().optional(),\n});\n\ntype AssignFormData = z.infer<typeof assignFormSchema>;\n\nexport function AssignModal({ isOpen, onClose, issueId }: AssignModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAdmins, setSelectedAdmins] = useState<string[]>([]);\n\n  const form = useForm<AssignFormData>({\n    resolver: zodResolver(assignFormSchema),\n    defaultValues: {\n      adminIds: [],\n      assignmentNotes: \"\",\n    },\n  });\n\n  const { data: admins, isLoading: loadingAdmins } = useQuery({\n    queryKey: [\"/api/admins\"],\n    enabled: isOpen,\n  });\n\n  const assignMutation = useMutation({\n    mutationFn: async (data: AssignFormData) => {\n      const response = await apiRequest(\"POST\", `/api/issues/${issueId}/assign`, {\n        adminIds: data.adminIds,\n        assignmentNotes: data.assignmentNotes,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Issue assigned\",\n        description: \"The issue has been successfully assigned to the selected admin(s).\",\n      });\n      onClose();\n      form.reset();\n      setSelectedAdmins([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Assignment failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAdminToggle = (adminId: string, checked: boolean) => {\n    const newSelectedAdmins = checked\n      ? [...selectedAdmins, adminId]\n      : selectedAdmins.filter(id => id !== adminId);\n    \n    setSelectedAdmins(newSelectedAdmins);\n    form.setValue(\"adminIds\", newSelectedAdmins);\n  };\n\n  const onSubmit = (data: AssignFormData) => {\n    if (data.adminIds.length === 0) {\n      toast({\n        title: \"No admins selected\",\n        description: \"Please select at least one admin to assign the issue to.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    assignMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n    setSelectedAdmins([]);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Assign Issue to Admin</DialogTitle>\n          <DialogDescription>\n            Select one or more administrators to assign this issue to.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label>Select Admin(s) *</Label>\n            <div className=\"mt-2 space-y-2 max-h-40 overflow-y-auto border border-border rounded-md p-3\">\n              {loadingAdmins ? (\n                Array.from({ length: 3 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-2\">\n                    <Skeleton className=\"h-4 w-4\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                  </div>\n                ))\n              ) : (admins || []).length > 0 ? (\n                (admins || []).map((admin: any) => (\n                  <div key={admin.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`admin-${admin.id}`}\n                      checked={selectedAdmins.includes(admin.id)}\n                      onCheckedChange={(checked) => handleAdminToggle(admin.id, checked as boolean)}\n                      data-testid={`checkbox-admin-${admin.id}`}\n                    />\n                    <Label\n                      htmlFor={`admin-${admin.id}`}\n                      className=\"text-sm text-foreground cursor-pointer\"\n                      data-testid={`label-admin-${admin.id}`}\n                    >\n                      {admin.name} ({admin.email})\n                    </Label>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex items-center justify-center py-4\">\n                  <div className=\"text-center\">\n                    <AlertCircle className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\" data-testid=\"no-admins-message\">\n                      No administrators available\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n            {form.formState.errors.adminIds && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.adminIds.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"assignmentNotes\">Assignment Notes</Label>\n            <Textarea\n              id=\"assignmentNotes\"\n              data-testid=\"textarea-assignment-notes\"\n              {...form.register(\"assignmentNotes\")}\n              rows={2}\n              placeholder=\"Additional instructions for the admin(s) (optional)\"\n            />\n            {form.formState.errors.assignmentNotes && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.assignmentNotes.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel-assign\">\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={assignMutation.isPending || selectedAdmins.length === 0}\n              className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-submit-assign\"\n            >\n              {assignMutation.isPending ? \"Assigning...\" : \"Assign Issue\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6901},"client/src/components/filters.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { getStates, getCities } from \"@/lib/api\";\n\ninterface FiltersProps {\n  onFiltersChange: (filters: {\n    state?: string;\n    city?: string;\n    status?: string;\n  }) => void;\n}\n\nexport function Filters({ onFiltersChange }: FiltersProps) {\n  const [states, setStates] = useState<{ value: string; label: string }[]>([]);\n  const [cities, setCities] = useState<{ value: string; label: string }[]>([]);\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"\");\n\n  useEffect(() => {\n    loadStates();\n  }, []);\n\n  useEffect(() => {\n    if (selectedState) {\n      loadCities(selectedState);\n    } else {\n      setCities([]);\n      setSelectedCity(\"\");\n    }\n  }, [selectedState]);\n\n  useEffect(() => {\n    onFiltersChange({\n      state: selectedState && selectedState !== \"all\" ? selectedState : undefined,\n      city: selectedCity && selectedCity !== \"all\" ? selectedCity : undefined,\n      status: selectedStatus && selectedStatus !== \"all\" ? selectedStatus : undefined,\n    });\n  }, [selectedState, selectedCity, selectedStatus, onFiltersChange]);\n\n  const loadStates = async () => {\n    try {\n      const statesData = await getStates();\n      setStates(statesData);\n    } catch (error) {\n      console.error(\"Failed to load states:\", error);\n    }\n  };\n\n  const loadCities = async (state: string) => {\n    try {\n      const citiesData = await getCities(state);\n      setCities(citiesData);\n    } catch (error) {\n      console.error(\"Failed to load cities:\", error);\n    }\n  };\n\n  const handleStateChange = (value: string) => {\n    setSelectedState(value);\n    setSelectedCity(\"\"); // Reset city when state changes\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Filter Issues</CardTitle>\n        <CardDescription>\n          Filter issues by location and status\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"state-filter\">State</Label>\n            <Select value={selectedState} onValueChange={handleStateChange}>\n              <SelectTrigger data-testid=\"select-state-filter\">\n                <SelectValue placeholder=\"All States\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All States</SelectItem>\n                {states.map((state) => (\n                  <SelectItem key={state.value} value={state.value}>\n                    {state.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"city-filter\">City</Label>\n            <Select value={selectedCity} onValueChange={setSelectedCity} disabled={!selectedState}>\n              <SelectTrigger data-testid=\"select-city-filter\">\n                <SelectValue placeholder=\"All Cities\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Cities</SelectItem>\n                {cities.map((city) => (\n                  <SelectItem key={city.value} value={city.value}>\n                    {city.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"status-filter\">Status</Label>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All</SelectItem>\n                <SelectItem value=\"not-assigned\">Not Assigned</SelectItem>\n                <SelectItem value=\"assigned\">Assigned</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4404},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Building2, Plus, LogOut, BarChart3, FileText } from \"lucide-react\";\n\nexport function Header() {\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getMenuOptionText = () => {\n    if (user?.role === \"citizen\") return \"My Reports\";\n    return \"Analytics\";\n  };\n\n  const getMenuOptionLink = () => {\n    if (user?.role === \"citizen\") return \"/my-reports\";\n    return \"/analytics\";\n  };\n\n  if (!user) return null;\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center cursor-pointer\" data-testid=\"link-home\">\n              <Building2 className=\"h-8 w-8 text-primary mr-3\" />\n              <span className=\"text-xl font-bold text-foreground\">CivicReport</span>\n            </div>\n          </Link>\n          \n          <div className=\"flex items-center space-x-4\">\n            {user.role === \"citizen\" && (\n              <Link href=\"/add-issue\">\n                <Button data-testid=\"button-add-issue\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Issue\n                </Button>\n              </Link>\n            )}\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full p-0\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                      {getInitials(user.name)}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <Link href={getMenuOptionLink()}>\n                  <DropdownMenuItem data-testid=\"menu-item-reports-analytics\">\n                    {user.role === \"citizen\" ? (\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                    ) : (\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                    )}\n                    {getMenuOptionText()}\n                  </DropdownMenuItem>\n                </Link>\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-item-logout\">\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3214},"client/src/components/issue-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThumbsUp, Calendar, MapPin, User, Phone } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\ninterface IssueCardProps {\n  issue: {\n    id: string;\n    title: string;\n    description: string;\n    status: string;\n    priority: string;\n    category: { name: string } | null;\n    user: { name: string } | null;\n    reporterName: string;\n    reporterPhone: string;\n    location: string;\n    state: string;\n    city: string;\n    mediaUrls: string[];\n    upvoteCount: number;\n    userUpvoted?: boolean;\n    createdAt: string;\n  };\n  currentUserId?: string;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"not-assigned\":\n      return \"bg-red-500 text-white\";\n    case \"assigned\":\n      return \"bg-yellow-500 text-white\";\n    case \"resolved\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"high\":\n      return \"bg-red-500 text-white\";\n    case \"medium\":\n      return \"bg-yellow-500 text-white\";\n    case \"low\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst formatStatus = (status: string) => {\n  return status.split(\"-\").map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(\" \");\n};\n\nexport function IssueCard({ issue, currentUserId }: IssueCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const upvoteMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/issues/${issue.id}/upvote`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Vote recorded\",\n        description: issue.userUpvoted ? \"Upvote removed\" : \"Issue upvoted\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpvote = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (currentUserId) {\n      upvoteMutation.mutate();\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\" data-testid={`card-issue-${issue.id}`}>\n      <Link href={`/issue/${issue.id}`}>\n        <div>\n          {issue.mediaUrls && issue.mediaUrls.length > 0 && (\n            <div className=\"h-48 bg-muted\">\n              <img\n                src={issue.mediaUrls[0]}\n                alt={issue.title}\n                className=\"w-full h-full object-cover\"\n                onError={(e) => {\n                  e.currentTarget.style.display = 'none';\n                }}\n              />\n            </div>\n          )}\n          \n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-start mb-2\">\n              <Badge className={cn(\"text-xs font-medium\", getStatusColor(issue.status))} data-testid={`status-${issue.id}`}>\n                {formatStatus(issue.status)}\n              </Badge>\n              <Badge className={cn(\"text-xs font-medium\", getPriorityColor(issue.priority))} data-testid={`priority-${issue.id}`}>\n                {issue.priority.charAt(0).toUpperCase() + issue.priority.slice(1)}\n              </Badge>\n            </div>\n            \n            <h4 className=\"font-semibold text-foreground mb-2 line-clamp-2\" data-testid={`title-${issue.id}`}>\n              {issue.title}\n            </h4>\n            \n            <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`category-${issue.id}`}>\n              {issue.category?.name || \"Other\"}\n            </p>\n            \n            <div className=\"space-y-1 mb-3\">\n              <div className=\"flex items-center text-sm text-foreground\">\n                <User className=\"h-3 w-3 mr-1\" />\n                <span data-testid={`reporter-${issue.id}`}>Reported by: {issue.reporterName}</span>\n              </div>\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <MapPin className=\"h-3 w-3 mr-1\" />\n                <span data-testid={`location-${issue.id}`}>{issue.location}, {issue.city}</span>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3 mr-1\" />\n                <span data-testid={`date-${issue.id}`}>{formatDate(issue.createdAt)}</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleUpvote}\n                  disabled={!currentUserId || upvoteMutation.isPending}\n                  className={cn(\n                    \"flex items-center text-sm\",\n                    issue.userUpvoted ? \"text-primary\" : \"text-muted-foreground hover:text-primary\"\n                  )}\n                  data-testid={`button-upvote-${issue.id}`}\n                >\n                  <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                  <span data-testid={`upvote-count-${issue.id}`}>{issue.upvoteCount}</span>\n                </Button>\n                \n                <Button size=\"sm\" data-testid={`button-view-${issue.id}`}>\n                  View Issue\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </div>\n      </Link>\n    </Card>\n  );\n}\n","size_bytes":6153},"client/src/components/resolve-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle \n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { X, Upload, AlertCircle } from \"lucide-react\";\nimport { resolveIssueSchema } from \"@shared/schema\";\nimport type { ResolveIssue } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ResolveModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  issueId: string;\n}\n\nexport function ResolveModal({ isOpen, onClose, issueId }: ResolveModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n  const form = useForm<ResolveIssue>({\n    resolver: zodResolver(resolveIssueSchema),\n    defaultValues: {\n      resolutionNotes: \"\",\n      resolutionImageUrl: \"\",\n    },\n  });\n\n  const resolveMutation = useMutation({\n    mutationFn: async (data: ResolveIssue) => {\n      const formData = new FormData();\n      formData.append(\"resolutionNotes\", data.resolutionNotes);\n      \n      if (selectedFile) {\n        formData.append(\"resolutionImage\", selectedFile);\n      }\n\n      const response = await fetch(`/api/issues/${issueId}/resolve`, {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to resolve issue\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Issue resolved\",\n        description: \"The issue has been marked as resolved.\",\n      });\n      onClose();\n      form.reset();\n      setSelectedFile(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Resolution failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const onSubmit = (data: ResolveIssue) => {\n    if (!selectedFile) {\n      toast({\n        title: \"Proof image required\",\n        description: \"Please upload a proof image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    resolveMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n    setSelectedFile(null);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Resolve Issue</DialogTitle>\n          <DialogDescription>\n            Provide resolution details and upload proof of completion.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"resolutionNotes\">Resolution Notes *</Label>\n            <Textarea\n              id=\"resolutionNotes\"\n              data-testid=\"textarea-resolution-notes\"\n              {...form.register(\"resolutionNotes\")}\n              rows={3}\n              placeholder=\"Describe how the issue was resolved\"\n            />\n            {form.formState.errors.resolutionNotes && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.resolutionNotes.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"proof-upload\">Upload Proof Image *</Label>\n            <div className=\"mt-2\">\n              <div className=\"flex justify-center px-6 pt-5 pb-6 border-2 border-border border-dashed rounded-md\">\n                <div className=\"space-y-1 text-center\">\n                  <Upload className=\"mx-auto h-8 w-8 text-muted-foreground\" />\n                  <div className=\"flex text-sm text-muted-foreground\">\n                    <label\n                      htmlFor=\"proof-upload\"\n                      className=\"relative cursor-pointer bg-transparent rounded-md font-medium text-primary hover:text-primary/80\"\n                    >\n                      <span>Upload proof image</span>\n                      <input\n                        id=\"proof-upload\"\n                        name=\"proofImage\"\n                        type=\"file\"\n                        className=\"sr-only\"\n                        accept=\"image/*\"\n                        onChange={handleFileChange}\n                        data-testid=\"input-proof-upload\"\n                      />\n                    </label>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    PNG, JPG up to 10MB\n                  </p>\n                </div>\n              </div>\n\n              {selectedFile && (\n                <div className=\"mt-2 p-2 bg-muted rounded-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm truncate\">{selectedFile.name}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedFile(null)}\n                      data-testid=\"button-remove-proof\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel-resolve\">\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={resolveMutation.isPending}\n              className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-submit-resolve\"\n            >\n              {resolveMutation.isPending ? \"Resolving...\" : \"Mark as Resolved\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6433},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser, LoginData } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to CivicReport, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3141},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport async function uploadFile(file: File): Promise<string> {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  const response = await fetch('/api/upload', {\n    method: 'POST',\n    body: formData,\n    credentials: 'include',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Upload failed');\n  }\n  \n  const result = await response.json();\n  return result.url;\n}\n\nexport async function getStates() {\n  const response = await fetch('/api/states', {\n    credentials: 'include',\n  });\n  return response.json();\n}\n\nexport async function getCities(state: string) {\n  const response = await fetch(`/api/cities/${state}`, {\n    credentials: 'include',\n  });\n  return response.json();\n}\n","size_bytes":751},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":707},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/add-issue-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Upload, AlertCircle } from \"lucide-react\";\nimport { insertIssueSchema } from \"@shared/schema\";\nimport type { InsertIssue } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getStates, getCities } from \"@/lib/api\";\n\nexport default function AddIssuePage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const [states, setStates] = useState<{ value: string; label: string }[]>([]);\n  const [cities, setCities] = useState<{ value: string; label: string }[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n\n  const form = useForm<InsertIssue>({\n    resolver: zodResolver(insertIssueSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      state: \"\",\n      city: \"\",\n      reporterName: user?.name || \"\",\n      reporterPhone: \"\",\n      categoryId: \"\",\n      location: \"\",\n      priority: \"\",\n      mediaUrls: [],\n      userId: user?.id || \"\",\n    },\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  useEffect(() => {\n    loadStates();\n  }, []);\n\n  useEffect(() => {\n    const state = form.watch(\"state\");\n    if (state) {\n      loadCities(state);\n    } else {\n      setCities([]);\n      form.setValue(\"city\", \"\");\n    }\n  }, [form.watch(\"state\")]);\n\n  const loadStates = async () => {\n    try {\n      const statesData = await getStates();\n      setStates(statesData);\n    } catch (error) {\n      console.error(\"Failed to load states:\", error);\n    }\n  };\n\n  const loadCities = async (state: string) => {\n    try {\n      const citiesData = await getCities(state);\n      setCities(citiesData);\n    } catch (error) {\n      console.error(\"Failed to load cities:\", error);\n    }\n  };\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertIssue) => {\n      const formData = new FormData();\n      \n      // Append form fields\n      Object.entries(data).forEach(([key, value]) => {\n        if (key !== \"mediaUrls\" && value !== null && value !== undefined) {\n          formData.append(key, String(value));\n        }\n      });\n      \n      // Append files\n      selectedFiles.forEach((file) => {\n        formData.append(\"media\", file);\n      });\n\n      const response = await fetch(\"/api/issues\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to submit issue\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\"] });\n      toast({\n        title: \"Issue submitted\",\n        description: \"Your issue has been successfully submitted.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files].slice(0, 5)); // Max 5 files\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const onSubmit = (data: InsertIssue) => {\n    if (selectedFiles.length === 0) {\n      toast({\n        title: \"Media required\",\n        description: \"Please upload at least one image or video.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    submitMutation.mutate(data);\n  };\n\n  if (user?.role !== \"citizen\") {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">Only citizens can submit issues.</p>\n            <Link href=\"/\">\n              <Button className=\"mt-4\">Go to Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Report New Issue</CardTitle>\n                <CardDescription>\n                  Provide detailed information about the civic issue you want to report\n                </CardDescription>\n              </div>\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-close\">\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"title\">Title / Short Description *</Label>\n                  <Input\n                    id=\"title\"\n                    data-testid=\"input-title\"\n                    {...form.register(\"title\")}\n                    placeholder=\"Brief description of the issue\"\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"description\">Detailed Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    data-testid=\"textarea-description\"\n                    {...form.register(\"description\")}\n                    rows={4}\n                    placeholder=\"Provide detailed information about the issue\"\n                  />\n                  {form.formState.errors.description && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.description.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Select value={form.watch(\"state\")} onValueChange={(value) => form.setValue(\"state\", value)}>\n                    <SelectTrigger data-testid=\"select-state\">\n                      <SelectValue placeholder=\"Select State\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {states.map((state) => (\n                        <SelectItem key={state.value} value={state.value}>\n                          {state.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.state && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.state.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"city\">City *</Label>\n                  <Select value={form.watch(\"city\")} onValueChange={(value) => form.setValue(\"city\", value)} disabled={!form.watch(\"state\")}>\n                    <SelectTrigger data-testid=\"select-city\">\n                      <SelectValue placeholder=\"Select City\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cities.map((city) => (\n                        <SelectItem key={city.value} value={city.value}>\n                          {city.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.city && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.city.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"reporterName\">Reporter Name *</Label>\n                  <Input\n                    id=\"reporterName\"\n                    data-testid=\"input-reporter-name\"\n                    {...form.register(\"reporterName\")}\n                    placeholder=\"Your full name\"\n                  />\n                  {form.formState.errors.reporterName && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.reporterName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"reporterPhone\">Phone Number *</Label>\n                  <Input\n                    id=\"reporterPhone\"\n                    data-testid=\"input-reporter-phone\"\n                    {...form.register(\"reporterPhone\")}\n                    placeholder=\"Your phone number\"\n                  />\n                  {form.formState.errors.reporterPhone && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.reporterPhone.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"categoryId\">Category *</Label>\n                  <Select value={form.watch(\"categoryId\") || \"\"} onValueChange={(value) => form.setValue(\"categoryId\", value)}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Select Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(categories || []).map((category: any) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.categoryId && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.categoryId.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"priority\">Priority *</Label>\n                  <Select value={form.watch(\"priority\")} onValueChange={(value) => form.setValue(\"priority\", value)}>\n                    <SelectTrigger data-testid=\"select-priority\">\n                      <SelectValue placeholder=\"Select Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.priority && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.priority.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"location\">Location/Landmark *</Label>\n                  <Input\n                    id=\"location\"\n                    data-testid=\"input-location\"\n                    {...form.register(\"location\")}\n                    placeholder=\"Specific location or nearby landmark\"\n                  />\n                  {form.formState.errors.location && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.location.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <Label htmlFor=\"media\">Upload Images/Videos *</Label>\n                  <div className=\"mt-2\">\n                    <div className=\"flex justify-center px-6 pt-5 pb-6 border-2 border-border border-dashed rounded-md\">\n                      <div className=\"space-y-1 text-center\">\n                        <Upload className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                        <div className=\"flex text-sm text-muted-foreground\">\n                          <label\n                            htmlFor=\"media-upload\"\n                            className=\"relative cursor-pointer bg-transparent rounded-md font-medium text-primary hover:text-primary/80\"\n                          >\n                            <span>Upload files</span>\n                            <input\n                              id=\"media-upload\"\n                              name=\"media\"\n                              type=\"file\"\n                              className=\"sr-only\"\n                              multiple\n                              accept=\"image/*,video/*\"\n                              onChange={handleFileChange}\n                              data-testid=\"input-media-upload\"\n                            />\n                          </label>\n                          <p className=\"pl-1\">or drag and drop</p>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Images and videos up to 10MB each (max 5 files)\n                        </p>\n                      </div>\n                    </div>\n\n                    {selectedFiles.length > 0 && (\n                      <div className=\"mt-4 space-y-2\">\n                        <p className=\"text-sm font-medium\">Selected files:</p>\n                        {selectedFiles.map((file, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center justify-between p-2 bg-muted rounded-md\"\n                          >\n                            <span className=\"text-sm truncate\">{file.name}</span>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFile(index)}\n                              data-testid={`button-remove-file-${index}`}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4 pt-6 border-t border-border\">\n                <Link href=\"/\">\n                  <Button type=\"button\" variant=\"outline\" data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                </Link>\n                <Button\n                  type=\"submit\"\n                  disabled={submitMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {submitMutation.isPending ? \"Submitting...\" : \"Submit Issue\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16384},"client/src/pages/analytics-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowLeft, \n  AlertCircle, \n  Clock, \n  Cog, \n  CheckCircle, \n  TrendingUp,\n  Users,\n  Target,\n  Award\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"not-assigned\":\n      return \"bg-red-500 text-white\";\n    case \"assigned\":\n      return \"bg-yellow-500 text-white\";\n    case \"resolved\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst formatStatus = (status: string) => {\n  return status.split(\"-\").map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(\" \");\n};\n\nexport default function AnalyticsPage() {\n  const { user } = useAuth();\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/analytics\"],\n    enabled: user?.role === \"admin\" || user?.role === \"superadmin\",\n  });\n\n  if (user?.role === \"citizen\") {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-12\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">Only admins can access analytics.</p>\n            <Link href=\"/\">\n              <Button className=\"mt-4\">Go to Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground\">System Analytics</h2>\n          <Link href=\"/\">\n            <Button variant=\"ghost\" data-testid=\"button-back-dashboard\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-8\">\n            {/* Analytics Cards Skeleton */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-20\" />\n                        <Skeleton className=\"h-8 w-16\" />\n                      </div>\n                      <Skeleton className=\"h-8 w-8 rounded\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Charts Skeleton */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-32\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 4 }).map((_, i) => (\n                      <div key={i} className=\"flex items-center justify-between\">\n                        <Skeleton className=\"h-4 w-24\" />\n                        <div className=\"flex items-center space-x-2\">\n                          <Skeleton className=\"h-2 w-24\" />\n                          <Skeleton className=\"h-4 w-8\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-32\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 4 }).map((_, i) => (\n                      <div key={i} className=\"flex justify-between items-center\">\n                        <Skeleton className=\"h-4 w-32\" />\n                        <Skeleton className=\"h-4 w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        ) : analytics ? (\n          <div className=\"space-y-8\">\n            {/* Analytics Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Issues</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-issues\">\n                        {analytics?.totalIssues || 0}\n                      </p>\n                    </div>\n                    <AlertCircle className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Not Assigned</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"not-assigned-count\">\n                        {analytics?.notAssigned || 0}\n                      </p>\n                    </div>\n                    <Clock className=\"h-8 w-8 text-red-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">In Progress</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"assigned-count\">\n                        {analytics?.assigned || 0}\n                      </p>\n                    </div>\n                    <Cog className=\"h-8 w-8 text-yellow-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Resolved</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"resolved-count\">\n                        {analytics?.resolved || 0}\n                      </p>\n                    </div>\n                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Charts Section */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Category Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Issues by Category</CardTitle>\n                  <CardDescription>\n                    Distribution of issues across different categories\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {(analytics?.categoryBreakdown || []).map((category: any, index: number) => {\n                      const percentage = (analytics?.totalIssues || 0) > 0 \n                        ? Math.round((category.count / (analytics?.totalIssues || 1)) * 100) \n                        : 0;\n                      \n                      return (\n                        <div key={category.name} className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-foreground\" data-testid={`category-name-${index}`}>\n                              {category.name}\n                            </span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm text-muted-foreground\" data-testid={`category-percentage-${index}`}>\n                                {percentage}%\n                              </span>\n                              <span className=\"text-sm text-muted-foreground\" data-testid={`category-count-${index}`}>\n                                ({category.count})\n                              </span>\n                            </div>\n                          </div>\n                          <Progress \n                            value={percentage} \n                            className=\"h-2\" \n                            data-testid={`category-progress-${index}`}\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Key Metrics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Key Metrics</CardTitle>\n                  <CardDescription>\n                    Important system performance indicators\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Target className=\"h-4 w-4 text-primary\" />\n                        <span className=\"text-sm text-foreground\">Resolution Rate</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-foreground\" data-testid=\"resolution-rate\">\n                        {(analytics?.totalIssues || 0) > 0 \n                          ? Math.round(((analytics?.resolved || 0) / (analytics?.totalIssues || 1)) * 100)\n                          : 0}%\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-yellow-500\" />\n                        <span className=\"text-sm text-foreground\">Pending Issues</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-foreground\" data-testid=\"pending-issues\">\n                        {(analytics?.notAssigned || 0) + (analytics?.assigned || 0)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"text-sm text-foreground\">Assignment Rate</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-foreground\" data-testid=\"assignment-rate\">\n                        {(analytics?.totalIssues || 0) > 0 \n                          ? Math.round((((analytics?.assigned || 0) + (analytics?.resolved || 0)) / (analytics?.totalIssues || 1)) * 100)\n                          : 0}%\n                      </span>\n                    </div>\n\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"h-4 w-4 text-blue-500\" />\n                        <span className=\"text-sm text-foreground\">Active Issues</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-foreground\" data-testid=\"active-issues\">\n                        {analytics?.assigned || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Most Upvoted Issues */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Most Upvoted Issues</CardTitle>\n                <CardDescription>\n                  Issues with the highest community engagement\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(analytics?.mostUpvotedIssues || []).length > 0 ? (\n                    (analytics?.mostUpvotedIssues || []).map((issue: any, index: number) => (\n                      <div\n                        key={issue.id}\n                        className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n                        data-testid={`upvoted-issue-${index}`}\n                      >\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground mb-1\" data-testid={`upvoted-issue-title-${index}`}>\n                            {issue.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`upvoted-issue-category-${index}`}>\n                            {issue.category?.name || \"Other\"} • {issue.location}, {issue.city}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <Badge \n                            className={cn(\"text-xs font-medium\", getStatusColor(issue.status))}\n                            data-testid={`upvoted-issue-status-${index}`}\n                          >\n                            {formatStatus(issue.status)}\n                          </Badge>\n                          <div className=\"flex items-center space-x-1\">\n                            <Award className=\"h-4 w-4 text-primary\" />\n                            <span className=\"text-sm font-semibold text-foreground\" data-testid={`upvoted-issue-count-${index}`}>\n                              {issue.upvoteCount} upvotes\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\" data-testid=\"no-upvoted-issues\">\n                        No upvoted issues found.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\" data-testid=\"analytics-error\">\n              Failed to load analytics data. Please try again.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":15610},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertCircle, Building2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, loginSchema } from \"@shared/schema\";\nimport type { InsertUser, LoginData } from \"@shared/schema\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const registerForm = useForm<InsertUser & { confirmPassword: string }>({\n    resolver: zodResolver(insertUserSchema.extend({\n      confirmPassword: insertUserSchema.shape.password,\n    }).refine((data) => data.password === data.confirmPassword, {\n      message: \"Passwords don't match\",\n      path: [\"confirmPassword\"],\n    })),\n    defaultValues: { name: \"\", email: \"\", password: \"\", role: \"citizen\", confirmPassword: \"\" },\n  });\n\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: InsertUser & { confirmPassword: string }) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <Building2 className=\"h-10 w-10 text-primary mr-3\" />\n            <h1 className=\"text-3xl font-bold text-foreground\">CivicReport</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Report civic issues and make your community better\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsContent value=\"login\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"login-email\">Email address</Label>\n                    <Input\n                      id=\"login-email\"\n                      type=\"email\"\n                      data-testid=\"input-login-email\"\n                      {...loginForm.register(\"email\")}\n                      placeholder=\"Enter your email\"\n                    />\n                    {loginForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      data-testid=\"input-login-password\"\n                      {...loginForm.register(\"password\")}\n                      placeholder=\"Enter your password\"\n                    />\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    data-testid=\"button-login\"\n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n                  </Button>\n\n                  {loginMutation.error && (\n                    <div className=\"flex items-center gap-2 text-destructive text-sm\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span>Invalid email or password</span>\n                    </div>\n                  )}\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"register-name\">Full Name</Label>\n                    <Input\n                      id=\"register-name\"\n                      type=\"text\"\n                      data-testid=\"input-register-name\"\n                      {...registerForm.register(\"name\")}\n                      placeholder=\"Enter your full name\"\n                    />\n                    {registerForm.formState.errors.name && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.name.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-email\">Email address</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      data-testid=\"input-register-email\"\n                      {...registerForm.register(\"email\")}\n                      placeholder=\"Enter your email\"\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      data-testid=\"input-register-password\"\n                      {...registerForm.register(\"password\")}\n                      placeholder=\"Create a password\"\n                    />\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type=\"password\"\n                      data-testid=\"input-register-confirm-password\"\n                      {...registerForm.register(\"confirmPassword\")}\n                      placeholder=\"Confirm your password\"\n                    />\n                    {registerForm.formState.errors.confirmPassword && (\n                      <p className=\"text-sm text-destructive mt-1\">\n                        {registerForm.formState.errors.confirmPassword.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    data-testid=\"button-register\"\n                    disabled={registerMutation.isPending}\n                  >\n                    {registerMutation.isPending ? \"Creating account...\" : \"Create account\"}\n                  </Button>\n\n                  {registerMutation.error && (\n                    <div className=\"flex items-center gap-2 text-destructive text-sm\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span>Registration failed. Please try again.</span>\n                    </div>\n                  )}\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8673},"client/src/pages/dashboard-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Header } from \"@/components/header\";\nimport { Filters } from \"@/components/filters\";\nimport { IssueCard } from \"@/components/issue-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  const [filters, setFilters] = useState<{\n    state?: string;\n    city?: string;\n    status?: string;\n  }>({});\n\n  const { data: issues, isLoading } = useQuery({\n    queryKey: [\"/api/issues\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.state) params.append(\"state\", filters.state);\n      if (filters.city) params.append(\"city\", filters.city);\n      if (filters.status) params.append(\"status\", filters.status);\n      \n      // For admin users, show only assigned issues\n      if (user?.role === \"admin\") {\n        const response = await fetch(\"/api/admin/issues\", {\n          credentials: \"include\",\n        });\n        return response.json();\n      }\n      \n      const response = await fetch(`/api/issues?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n  });\n\n  const handleFiltersChange = (newFilters: typeof filters) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Show filters only for citizens and super admins */}\n        {user?.role !== \"admin\" && (\n          <div className=\"mb-8\">\n            <Filters onFiltersChange={handleFiltersChange} />\n          </div>\n        )}\n\n        {/* Issues Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {isLoading ? (\n            Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"space-y-4\">\n                <Skeleton className=\"h-48 w-full\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              </div>\n            ))\n          ) : issues?.length === 0 ? (\n            <div className=\"col-span-full text-center py-12\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-issues\">\n                No issues found. {user?.role === \"citizen\" ? \"Be the first to report an issue!\" : \"\"}\n              </p>\n            </div>\n          ) : (\n            issues?.map((issue: any) => (\n              <IssueCard\n                key={issue.id}\n                issue={issue}\n                currentUserId={user?.id}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2914},"client/src/pages/issue-detail-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useRoute } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ResolveModal } from \"@/components/resolve-modal\";\nimport { AssignModal } from \"@/components/assign-modal\";\nimport { ArrowLeft, ThumbsUp, Calendar, MapPin, User, Phone, Check, UserPlus } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"not-assigned\":\n      return \"bg-red-500 text-white\";\n    case \"assigned\":\n      return \"bg-yellow-500 text-white\";\n    case \"resolved\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"high\":\n      return \"bg-red-500 text-white\";\n    case \"medium\":\n      return \"bg-yellow-500 text-white\";\n    case \"low\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst formatStatus = (status: string) => {\n  return status.split(\"-\").map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(\" \");\n};\n\nexport default function IssueDetailPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, params] = useRoute(\"/issue/:id\");\n  const [showResolveModal, setShowResolveModal] = useState(false);\n  const [showAssignModal, setShowAssignModal] = useState(false);\n\n  const issueId = params?.id;\n\n  const { data: issue, isLoading } = useQuery({\n    queryKey: [\"/api/issues\", issueId],\n    queryFn: async () => {\n      const response = await fetch(`/api/issues/${issueId}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Issue not found\");\n      }\n      return response.json();\n    },\n    enabled: !!issueId,\n  });\n\n  const upvoteMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/issues/${issueId}/upvote`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/issues\", issueId] });\n      toast({\n        title: \"Vote recorded\",\n        description: issue?.userUpvoted ? \"Upvote removed\" : \"Issue upvoted\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpvote = () => {\n    if (user?.id) {\n      upvoteMutation.mutate();\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"long\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n  };\n\n  const goBack = () => {\n    window.history.back();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <Skeleton className=\"h-8 w-1/3\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-64 w-full\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!issue) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Issue not found.</p>\n            <Button onClick={goBack} className=\"mt-4\">\n              Go Back\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"overflow-hidden\">\n          <CardContent className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Button variant=\"ghost\" onClick={goBack} data-testid=\"button-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={cn(\"text-xs font-medium\", getStatusColor(issue.status))} data-testid=\"status-badge\">\n                  {formatStatus(issue.status)}\n                </Badge>\n                <Badge className={cn(\"text-xs font-medium\", getPriorityColor(issue.priority))} data-testid=\"priority-badge\">\n                  {issue.priority.charAt(0).toUpperCase() + issue.priority.slice(1)}\n                </Badge>\n              </div>\n            </div>\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"issue-title\">\n              {issue.title}\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"issue-category\">\n              {issue.category?.name || \"Other\"}\n            </p>\n          </CardContent>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Issue Details</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Description</label>\n                  <p className=\"text-foreground\" data-testid=\"issue-description\">{issue.description}</p>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Reporter</label>\n                    <p className=\"text-foreground\" data-testid=\"issue-reporter\">{issue.reporterName}</p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Phone</label>\n                    <p className=\"text-foreground\" data-testid=\"issue-phone\">{issue.reporterPhone}</p>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Location</label>\n                    <p className=\"text-foreground\" data-testid=\"issue-location\">{issue.location}, {issue.city}</p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Date Reported</label>\n                    <p className=\"text-foreground\" data-testid=\"issue-date\">{formatDate(issue.createdAt)}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Uploaded Media</h3>\n              <div className=\"space-y-4\">\n                {issue.mediaUrls && issue.mediaUrls.length > 0 ? (\n                  issue.mediaUrls.map((url: string, index: number) => (\n                    <img\n                      key={index}\n                      src={url}\n                      alt={`Issue media ${index + 1}`}\n                      className=\"w-full rounded-lg border border-border\"\n                      data-testid={`issue-media-${index}`}\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                      }}\n                    />\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground\">No media uploaded</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6 border-t border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleUpvote}\n                  disabled={!user?.id || upvoteMutation.isPending}\n                  className={cn(\n                    \"flex items-center\",\n                    issue.userUpvoted ? \"text-primary\" : \"text-muted-foreground hover:text-primary\"\n                  )}\n                  data-testid=\"button-upvote\"\n                >\n                  <ThumbsUp className=\"h-4 w-4 mr-2\" />\n                  <span data-testid=\"upvote-count\">{issue.upvoteCount}</span> Upvotes\n                </Button>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                {user?.role === \"admin\" && issue.status === \"assigned\" && (\n                  <Button\n                    onClick={() => setShowResolveModal(true)}\n                    className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                    data-testid=\"button-resolve\"\n                  >\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Resolve Issue\n                  </Button>\n                )}\n                \n                {user?.role === \"superadmin\" && issue.status === \"not-assigned\" && (\n                  <Button\n                    onClick={() => setShowAssignModal(true)}\n                    className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                    data-testid=\"button-assign\"\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Assign to Admin\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Resolution Details (if resolved) */}\n          {issue.status === \"resolved\" && issue.resolutionNotes && (\n            <div className=\"p-6 bg-muted border-t border-border\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Resolution Details</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Resolution Notes</label>\n                  <p className=\"text-foreground\" data-testid=\"resolution-notes\">{issue.resolutionNotes}</p>\n                </div>\n                \n                {issue.resolver && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Resolved by</label>\n                    <p className=\"text-foreground\" data-testid=\"resolved-by\">{issue.resolver.name}</p>\n                  </div>\n                )}\n                \n                {issue.resolvedAt && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Resolution Date</label>\n                    <p className=\"text-foreground\" data-testid=\"resolved-at\">{formatDate(issue.resolvedAt)}</p>\n                  </div>\n                )}\n                \n                {issue.resolutionImageUrl && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-muted-foreground mb-1\">Proof of Resolution</label>\n                    <img\n                      src={issue.resolutionImageUrl}\n                      alt=\"Resolution proof\"\n                      className=\"w-full max-w-md rounded-lg border border-border\"\n                      data-testid=\"resolution-image\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                      }}\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      {/* Modals */}\n      <ResolveModal\n        isOpen={showResolveModal}\n        onClose={() => setShowResolveModal(false)}\n        issueId={issueId || \"\"}\n      />\n      \n      <AssignModal\n        isOpen={showAssignModal}\n        onClose={() => setShowAssignModal(false)}\n        issueId={issueId || \"\"}\n      />\n    </div>\n  );\n}\n","size_bytes":12559},"client/src/pages/my-reports-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, Calendar, ThumbsUp, MapPin } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"not-assigned\":\n      return \"bg-red-500 text-white\";\n    case \"assigned\":\n      return \"bg-yellow-500 text-white\";\n    case \"resolved\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"high\":\n      return \"bg-red-500 text-white\";\n    case \"medium\":\n      return \"bg-yellow-500 text-white\";\n    case \"low\":\n      return \"bg-green-500 text-white\";\n    default:\n      return \"bg-gray-500 text-white\";\n  }\n};\n\nconst formatStatus = (status: string) => {\n  return status.split(\"-\").map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  ).join(\" \");\n};\n\nexport default function MyReportsPage() {\n  const { user } = useAuth();\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [priorityFilter, setPriorityFilter] = useState(\"\");\n\n  const { data: issues, isLoading } = useQuery({\n    queryKey: [\"/api/issues\", { userId: user?.id }],\n    queryFn: async () => {\n      const params = new URLSearchParams({ userId: user?.id || \"\" });\n      const response = await fetch(`/api/issues?${params.toString()}`, {\n        credentials: \"include\",\n      });\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const filteredIssues = issues?.filter((issue: any) => {\n    if (statusFilter && statusFilter !== \"all\" && issue.status !== statusFilter) return false;\n    if (categoryFilter && categoryFilter !== \"all\" && issue.category?.id !== categoryFilter) return false;\n    if (priorityFilter && priorityFilter !== \"all\" && issue.priority !== priorityFilter) return false;\n    return true;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h2 className=\"text-2xl font-bold text-foreground\">My Reports</h2>\n          <Link href=\"/\">\n            <Button variant=\"ghost\" data-testid=\"button-back-dashboard\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n\n        {/* Filter Section */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Filter My Reports</CardTitle>\n            <CardDescription>\n              Filter your submitted reports by status, category, and priority\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"status-filter\">Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All</SelectItem>\n                    <SelectItem value=\"not-assigned\">Not Assigned</SelectItem>\n                    <SelectItem value=\"assigned\">Assigned</SelectItem>\n                    <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"category-filter\">Category</Label>\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger data-testid=\"select-category-filter\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {(categories || []).map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"priority-filter\">Priority</Label>\n                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                  <SelectTrigger data-testid=\"select-priority-filter\">\n                    <SelectValue placeholder=\"All Priorities\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Priorities</SelectItem>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reports List */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            Array.from({ length: 3 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Skeleton className=\"h-6 w-20\" />\n                      <Skeleton className=\"h-6 w-16\" />\n                      <Skeleton className=\"h-6 w-24\" />\n                    </div>\n                    <Skeleton className=\"h-6 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <div className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-4 w-16\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : filteredIssues?.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-reports\">\n                {issues?.length === 0 \n                  ? \"You haven't submitted any reports yet.\" \n                  : \"No reports match your current filters.\"\n                }\n              </p>\n              {issues?.length === 0 && (\n                <Link href=\"/add-issue\">\n                  <Button className=\"mt-4\">Submit Your First Report</Button>\n                </Link>\n              )}\n            </div>\n          ) : (\n            filteredIssues?.map((issue: any) => (\n              <Card key={issue.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-report-${issue.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <Badge className={cn(\"text-xs font-medium\", getStatusColor(issue.status))} data-testid={`status-${issue.id}`}>\n                          {formatStatus(issue.status)}\n                        </Badge>\n                        <Badge className={cn(\"text-xs font-medium\", getPriorityColor(issue.priority))} data-testid={`priority-${issue.id}`}>\n                          {issue.priority.charAt(0).toUpperCase() + issue.priority.slice(1)}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`category-${issue.id}`}>\n                          {issue.category?.name || \"Other\"}\n                        </span>\n                      </div>\n                      \n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid={`title-${issue.id}`}>\n                        {issue.title}\n                      </h3>\n                      \n                      <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                        <MapPin className=\"h-4 w-4 mr-1\" />\n                        <span data-testid={`location-${issue.id}`}>{issue.location}, {issue.city}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          <span data-testid={`date-${issue.id}`}>{formatDate(issue.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                          <span data-testid={`upvotes-${issue.id}`}>{issue.upvoteCount} upvotes</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-4 md:mt-0\">\n                      <Link href={`/issue/${issue.id}`}>\n                        <Button data-testid={`button-view-details-${issue.id}`}>\n                          View Details\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10371},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}